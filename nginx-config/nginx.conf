user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections 4096;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" '
                      '$request_time $upstream_response_time $pipe';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;
    server_tokens off;

    # 压缩设置
    gzip  on;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 请求体大小限制
    client_max_body_size 10M;

    # 添加响应头
    add_header X-Frame-Options SAMEORIGIN;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    # 请求限流配置
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;

    # 上游服务配置
    upstream user_service {
        server user-service:8000;
        keepalive 32;
    }
    
    upstream post_service {
        server post-service:8000;
        keepalive 32;
    }
    
    upstream notification_service {
        server notification-service:8000;
        keepalive 32;
    }

    upstream minio_service {
        server minio:9000;
        keepalive 16;
    }

    # 前端应用配置（未来添加）
    # upstream frontend_app {
    #     server frontend:80;
    #     keepalive 32;
    # }

    server {
        listen 80;
        server_name localhost;

        # 前端应用（占位，未来添加）
        # location / {
        #     proxy_pass http://frontend_app;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        # }

        # 优化后的路由配置 - 使用前缀匹配避免冲突
        location = /health {
            # 简单返回 200 状态码，表示 nginx 正常运行
            return 200 '{"status":"UP","service":"api-gateway"}';
            add_header Content-Type application/json;
            access_log off;
        }
        
        # # 健康检查路由
        # # API 级别健康检查
        # location = /api/v1/health {
        #     # 返回所有服务的聚合健康状态
        #     proxy_pass http://user-service/health;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     access_log off;
        # }
        location /api/v1/health {
            proxy_pass http://user_service/api/v1/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        # API 文档路由
        # location /api/v1/docs {
        #     rewrite ^/api/v1/docs$ /api/v1/docs/ permanent;
        # }
        
        # location /api/v1/docs/ {
        #     proxy_pass http://user_service/docs/;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        # }
        location /api/v1/docs {
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;

            # 加上这两句以确保 Swagger 的 JS/CSS 能正常代理
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
        
        # 用户服务 API 路由
        location /api/v1/auth/ {
            proxy_pass http://user_service/api/v1/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            limit_req zone=api_limit burst=20 nodelay;
        }

        location /api/v1/openapi.json {
            proxy_pass http://user_service;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/v1/users/ {
            proxy_pass http://user_service/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 帖子服务 API 路由
        location /api/v1/posts/ {
            proxy_pass http://post_service/api/v1/posts/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/v1/comments/ {
            proxy_pass http://post_service/api/v1/comments/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/v1/reactions/ {
            proxy_pass http://post_service/api/v1/reactions/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        location /api/v1/search/ {
            proxy_pass http://post_service/api/v1/search/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 通知服务 API 路由
        location /api/v1/notifications/ {
            proxy_pass http://notification_service/api/v1/notifications/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket 支持
        location /api/v1/notifications/ws {
            proxy_pass http://notification_service/api/v1/notifications/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400; # 24小时
        }

        # MinIO 静态资源代理
        location /user-content/ {
            proxy_pass http://minio_service/user-content/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_buffers 8 16k;
            proxy_buffer_size 32k;
        }
        
        location /post-content/ {
            proxy_pass http://minio_service/post-content/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_buffers 8 16k;
            proxy_buffer_size 32k;
        }

        # 主页 - 临时重定向到API文档
        location / {
            return 302 /api/v1/docs/;
        }
    }
}